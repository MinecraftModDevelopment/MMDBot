import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }

  dependencies {
    classpath 'org.shipkit:shipkit-changelog:1.1.15'
    classpath 'org.shipkit:shipkit-auto-version:1.1.20'
  }
}

plugins {
  id 'application'
  // id 'maven'
  id 'eclipse'
  id 'idea'
  id 'checkstyle'
  alias(libs.plugins.shadow)
  alias(libs.plugins.flyway)
  alias(libs.plugins.licenser)
  alias(libs.plugins.lombok)
}

group 'com.mcmoddev'
version project.bot_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Bot Version: $version"

apply from: 'gradle/shipkit.gradle'

final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)

application {
  mainClass = 'com.mcmoddev.mmdbot.core.RunBots'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:all', // deprecation, rawtypes, cast, unchecked, all
    //'-Xdiags:verbose',
    //'-Werror'
  ]
  compileJava.options.compilerArgs += '-proc:none'
}

configurations {
  shade
  implementation.extendsFrom(shade)

  global
  coreImplementation.extendsFrom(global)
  implementation.extendsFrom(global)
  listenerImplementation.extendsFrom(global)
  commanderImplementation.extendsFrom(global)
  watcherImplementation.extendsFrom(global)

  globalCompile
  coreCompileOnly.extendsFrom(globalCompile)
  compileOnly.extendsFrom(globalCompile)
  listenerCompileOnly.extendsFrom(globalCompile)
  commanderCompileOnly.extendsFrom(globalCompile)
  watcherCompileOnly.extendsFrom(globalCompile)
}

sourceSets {
  core {}
  listener {}
  commander {}
  watcher {}
}

repositories {
  mavenCentral()
  maven {
    name 'jda-chewtils'
    url 'https://m2.chew.pro/snapshots'
  }
  maven {
    url "https://clojars.org/repo/"
  }
  maven { url 'https://jitpack.io' }
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
  implementation sourceSets.core.output
  listenerImplementation sourceSets.core.output
  commanderImplementation sourceSets.core.output
  watcherImplementation sourceSets.core.output

  coreRuntimeOnly sourceSets.main.output
  coreRuntimeOnly sourceSets.listener.output
  coreRuntimeOnly sourceSets.commander.output
  coreRuntimeOnly sourceSets.watcher.output

  globalCompile project(':relauncher')

  global(libs.jda) {
    exclude module: 'jackson-databind' // their jackson version is outdated
  }
  global libs.chewtils

  global libs.guava
  global libs.gson
  global libs.logback
  global libs.nightconfig
  global libs.sqlite
  global libs.flyway
  global libs.graal
  global libs.graal.scriptengine
  global libs.reflections
  global libs.dotenv
  global libs.fastutil
  global libs.configurate.hocon
  global libs.cfapi
  global libs.jsoup
  global libs.eventdispatcher
  global libs.asmutils
  global libs.typetools
  global libs.webhooks
  global libs.javadocapi
  global libs.caffeine
  global libs.urldetector

  globalCompile libs.annotations
  globalCompile libs.lombok

  global libs.jdbi.core
  global libs.jdbi.sqlobject

  testImplementation libs.junit
  testImplementation 'org.mockito:mockito-core:4.5.1'

  testImplementation sourceSets.watcher.output
}

// Relocates all of the tasks from build
tasks.configureEach {
  if (it.group == 'build') it.group = 'other'
}
tasks.named('build').configure { it.group = "build" }

tasks.named('updateLicenses').configure { it.group = "licensing" }
tasks.named('licenseFormat').configure { group = "licensing" }

tasks.named('run', JavaExec).configure {
  workingDir = new File("run")
}

tasks.named('test', Test).configure {
  workingDir = new File("run")
}

tasks.named('shadowJar', ShadowJar).configure {
  sourceSets.each {
    from it.output
  }
  configurations = [project.configurations.global]
  manifest.attributes(makeManifestAttributes())
  classifier 'all'
  group 'build'
  description 'Builds the whole project with its dependencies.'
  dependsOn tasks.named('updateLicenses')
}

tasks.named(JavaPlugin.JAR_TASK_NAME, Jar).configure {
  from sourceSets.core.output
  manifest.attributes(makeManifestAttributes())
  classifier 'core-no-deps'
  description 'Builds the core sourceSet without its dependencies.'
  dependsOn tasks.named('updateLicenses')
}

configureBotJar("theListener", sourceSets.listener)
configureBotJar("theWatcher", sourceSets.watcher)
configureBotJar("theCommander", sourceSets.commander)

void configureBotJar(String botName, SourceSet sourceSet) {
  tasks.register("${botName}Jar", ShadowJar) {
    from sourceSets.core.output
    from sourceSet.output
    classifier(botName)
    manifest.attributes(makeManifestAttributes())
    configurations.add(project.configurations.global)
    group 'build'
    description "Builds the bot $botName and its dependencies."
    dependsOn tasks.named("updateLicenses")
  }
  tasks.register("${botName}JarNoDeps", Jar) {
    from sourceSets.core.output
    from sourceSet.output
    classifier "${botName}-no-deps"
    manifest.attributes(makeManifestAttributes())
    group 'build'
    description "Builds the bot $botName without its dependencies."
    dependsOn tasks.named("updateLicenses")
  }
}

def makeManifestAttributes() {
  final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
  final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
    return [
            'Maven-Artifact'          : "${project.group}:${archivesBaseName}:${project.bot_version}",
            'Timestamp'               : currentDateTime,
            'Specification-Title'     : archivesBaseName,
            'Specification-Vendor'    : 'Minecraft Mod Development',
            'Specification-Version'   : '1',
            'Implementation-Title'    : archivesBaseName,
            'Implementation-Version'  : "${project.bot_version}",
            'Implementation-Vendor'   : 'Minecraft Mod Development',
            'Implementation-Timestamp': currentDateTime,
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            'Built-On'                : "${project.libs.versions.jda.get()}-${project.libs.versions.chewtils.get()}",
            'Main-Class'              : application.getMainClass().get()
    ]
}

license {
  ignoreFailures = true // Temporarily downgrade license header violations to warnings, because in-flux development
  header = project.file('LicenseHeader.md')
  include '**/*.java'
  include '**/*.kt'
  exclude '**/package-info.java'
  exclude '**/module-info.java'
  newLine = false
  properties {
    year = actualDateTime.getYear()
  }
}

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

idea.module {
  downloadJavadoc = true
  inheritOutputDirs = true
}

tasks.withType(Javadoc).configureEach {
  failOnError = false
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

flyway {
  url = 'jdbc:sqlite:./data.db'
  user = 'sa'
}

checkstyle {
  ignoreFailures = true
  toolVersion = '9.1'
  showViolations = false
}

tasks.withType(Checkstyle).configureEach {
  reports {
    xml.required = true
    html.required = true
//  html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes.xsl') // Default
    html.stylesheet resources.text.fromFile('config/xsl/checkstyle-noframes-severity-sorted.xsl')
  }
}
