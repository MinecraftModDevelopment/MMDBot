import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'application'
    id 'java-library'
    // id 'maven'
    id 'eclipse'
    id 'idea'
    alias(libs.plugins.shadow)
    alias(libs.plugins.licenser)
}

group = "com.mcmoddev"
archivesBaseName = "UpdatingLauncher"
version = project.launcher_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {}
    agent {}
    launcher {}
}

configurations {
    shade
    launcherImplementation.extendsFrom(shade)

    globalCompileOnly
    apiCompileOnly.extendsFrom(globalCompileOnly)
    agentCompileOnly.extendsFrom(globalCompileOnly)
    launcherCompileOnly.extendsFrom(globalCompileOnly)
    compileOnly.extendsFrom(globalCompileOnly)
}

def agentClass = "com.mcmoddev.updatinglauncher.agent.Agent"

application {
    mainClass.set('com.mcmoddev.updatinglauncher.Main')
}

repositories {
    mavenCentral()
    maven {
        url "https://clojars.org/repo/"
    }
    maven {
        name 'jda-chewtils'
        url 'https://m2.chew.pro/snapshots'
    }
    maven { url 'https://jitpack.io' }
}

license {
    ignoreFailures = true // Temporarily downgrade license header violations to warnings, because in-flux development
    header = rootProject.file('LicenseHeader.md')
    include '**/*.java'
    include '**/*.kt'
    exclude '**/package-info.java'
    exclude '**/module-info.java'
    newLine = false
    properties {
        year = OffsetDateTime.now(ZoneOffset.UTC).withNano(0).getYear()
    }
}

dependencies {
    implementation sourceSets.api.output
    api sourceSets.api.output

    agentImplementation libs.jda // This is just a compat layer for jda mentionables. DO NOT USE FOR ANYTHING ELSE as the agent will not have it shaded
    agentImplementation libs.logback
    agentImplementation sourceSets.api.output

    shade sourceSets.api.output
    shade libs.gson
    shade libs.logback
    shade libs.configurate.hocon
    shade libs.commons.io

    // Discord stuff
    shade libs.jda
    shade libs.chewtils.command

    globalCompileOnly libs.annotations
}

tasks.create("agentJar", Jar).configure {
    from sourceSets.api.output
    from sourceSets.agent.output
    classifier("agent")
    group("build")
    description("Builds the agent JAR")

    final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
    final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
    manifest {
        attributes([
                'Timestamp'               : currentDateTime,
                'Specification-Title'     : archivesBaseName,
                'Specification-Vendor'    : 'Minecraft Mod Development',
                'Specification-Version'   : '1',
                'Implementation-Title'    : archivesBaseName,
                'Implementation-Version'  : "${project.launcher_version}",
                'Implementation-Vendor'   : 'Minecraft Mod Development',
                'Implementation-Timestamp': currentDateTime,
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Premain-Class"           : agentClass,
                "Can-Redefine-Classes"    : false,
                "Can-Retransform-Classes" : false
        ])
    }
}

tasks.create("copyAgentJar", Copy) {
    dependsOn("agentJar")
    mustRunAfter(tasks.getByName("agentJar"))
    mustRunAfter(tasks.getByName("processLauncherResources"))
    from "$buildDir/libs/$archivesBaseName-$version-agent.jar"
    into "$buildDir/resources/launcher/"
    rename "$archivesBaseName-$version-agent.jar", "agent.zip"
}

tasks.getByName('launcherClasses').configure {
    dependsOn("copyAgentJar")
    mustRunAfter(tasks.getByName("copyAgentJar"))
}

tasks.named('build').configure {
    dependsOn("copyAgentJar")
}

tasks.named('shadowJar', ShadowJar).configure {
    dependsOn("copyAgentJar")
    from sourceSets.launcher.output
    configurations = [project.configurations.shade]
    classifier("all")
    group("build")
    description("Builds the whole project with its dependencies.")
}

tasks.named(JavaPlugin.JAR_TASK_NAME, Jar).configure {
    from sourceSets.api.output
    from sourceSets.launcher.output
    manifest.attributes(makeManifestAttributes())
    classifier("no-deps")
    description("Builds the project without its dependencies.")
    dependsOn(tasks.getByName("updateLicenses"))
}

def makeManifestAttributes() {
    final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
    final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
    return [
            'Maven-Artifact'          : "${project.group}:${archivesBaseName}:${project.launcher_version}",
            'Timestamp'               : currentDateTime,
            'Specification-Title'     : archivesBaseName,
            'Specification-Vendor'    : 'Minecraft Mod Development',
            'Specification-Version'   : '1',
            'Implementation-Title'    : archivesBaseName,
            'Implementation-Version'  : "${project.launcher_version}",
            'Implementation-Vendor'   : 'Minecraft Mod Development',
            'Implementation-Timestamp': currentDateTime,
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            'Built-On'                : "${project.libs.versions.jda.get()}-${project.libs.versions.chewtils.get()}",
            'Main-Class'              : application.getMainClass().get(),
            "Premain-Class"           : "com.mcmoddev.updatinglauncher.Agent"
    ]
}
