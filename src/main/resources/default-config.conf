# The configuration file for MMDBot

# For most keys, if it is left blank or an invalid value, the corresponding feature is disabled or cannot output

# Configuration for the bot itself
bot = {
    # The token used for connecting to Discord.
    # A value with the character '!' will be considered as being empty or unconfigured.
    token = "!!! Insert token here !!!"

    # The PAT (Personal Access Token) used for connecting to GitHub for creating Gists
    # A value with the character '!' will be considered as being empty or unconfigured.
    githubToken = ""

    # The token used for connecting to the OwnBot API for dictionary lookup
    owlbotToken = ""

    # The snowflake ID of a user, to be the owner of this bot.
    # The owner has access to owner-only bot commands.
    owner = ""

    # The snowflake ID of the guild where this bot resides in
    # Event logging will be filtered to only receive from this guild
    guildId = ""

    activity = {
        # The type of activity the bot has.
        type = "PLAYING"

        # The name of the activity the bot has.
        name = "Type /help"
    }
}

# Configuration of aliases
# Aliases may be used as substitutes in entries that require snowflake IDs, such as channel blocklists
# This allows for more human-readable configuration of other settings
# Note: this only works up to the first level (no nested aliases)
aliases = {
    # Example usage:
    # bots_stuff = "<snowflake ID>"
}

# Configuration of channels
channels = {
    # The snowflake ID (or alias) of the bot console channel
    # This channel will receive different bot messages
    # Currently receives: failures to reapply roles on user rejoin, muting a user, unmuting a user
    console = ""

    # The snowflake ID (or alias) of the free mod ideas channel
    # This channel will have a thread created for every message, intended to be the place where the idea should be discussed
    free_mod_ideas = ""

    # Configuration of event logging channels
    # These channels will receive messages for different events within the guild
    events = {
        # The snowflake ID (or alias) of the basic events logging channel
        # Basic events include: user joining, user leaving, nickname changes
        basic = ""

        # The snowflake ID (or alias) of the important events logging channel
        # Important events include: role added to user, role removed from user
        important = ""

        # The snowflake ID (or alias) of the requests deletion events logging channel
        # Deletion of requests over the bad reaction threshold shall be logged here
        requests_deletion = ""

        # The channel we log all banned user events into for future reference, because if a user deletes the account we have
        # no name record of them in the banned users list, only the reason if one was given.
        banlogchannel = ""
    }

    # Configuration of requests-related channels
    # Used for the requests bad reaction threshold system
    requests = {
        # The snowflake (or alias) ID of the main requests channel
        # This channel will be monitored by the bot for bad reactions, according to the bad reaction thresholds
        main = ""
    }

    # Configuration of channels used in informative bot commands
    info = {
        # The snowflake ID (or alias) of the readme channel
        # This channel is mentioned in the `readme` command
        readme = ""

        # The snowflake ID (or alias) of the rules channel
        # This channel is mentioned in the `rules` command
        rules = ""
    }

    # Configuration of version notification channels
    # Version update notification messages will be sent to the specified channels
    notifications = {
        # The snowflake ID (or alias) of the Forge notifications channel
        forge = ""

        # The snowflake ID (or alias) of the Fabric notifications channel
        fabric = ""

        # The snowflake ID (or alias) of the Minecraft notifications channel
        minecraft = ""
    }
}

# Configuration of roles
roles = {
    # The snowflake ID of the bot maintainer role
    bot_maintainer = ""

    # The snowflake ID of the regular role
    regular = ""

    # Configuration of pingable and user-requestable roles
    pings = {
        # The snowflake ID of the role for the `event-pings` command
        event-pings = ""

        # The snowflake ID of the role for the `toggle-mc-server-pings` command
        toggle-mc-server-pings = ""
    }
}

# Configuration for the requests bad reaction threshold
requests = {
    # Time in hours since request creation for a request of a user who left the server to be deleted
    # For example, a value of 3 hours would mean any requests less than 3 hours old by a user who just
    # left the server will be deleted
    # A value of 0 will leave this functionality disabled
    leave_deletion = 0

    # Time in days for a request to be actionable through the request bad reactions systems
    # Any request past this freshness duration (stale requests) will not trigger the warning or deletion threshold
    # A value of 0 will leave this functionality disabled
    freshness_duration = 0

    # Configuration of the reaction emotes
    emotes = {
        # The snowflake IDs of the reaction emotes for bad requests
        bad = []

        # The snowflake IDs of the reaction emotes for requests that need improvements
        # These reaction emotes have half the weight of the reaction emotes for bad requests
        needs_improvement = []

        # The snowflake IDs of the reaction emotes for good requests
        good = []
    }

    # Configuration of the requests reaction thresholds
    # Request weights are calculated through the following formula: [bad + (needs_improvement * 0.5)] - good
    # If a request falls below the given thresholds, then the indicated action is taken
    # If any of the two thresholds are disabled, then the whole warning and removal system is disabled
    thresholds = {
        # Threshold where a user is warned that their request may be removed with further negative reactions
        warning = 3

        # Threshold where the request is removed and the user is informed of its removal
        removal = 5
    }
}

# Configuration of community channels
# This is used for the community channel creation command
community_channels = {
    # The snowflake ID (or alias) of the channel category where new community channels are created under
    category = ""

    # The default permissions of channel owners in their new community channels
    # This can be either bitfield, or a list of strings of the names of permissions (see the Permission enum)
    # Note: the bot can only assign permissions to channel owners if the bot has those permissions
    # Example: ["Manage Messages", "MANAGE_PERMISSIONS"]
    owner_permissions = []
}

# This controls role panels. One role panel can be setup like this:
# [role_panels.channelID-messageID]
#     emoteIDOrName = roleID
# Unicode codes have to be prefixed by an U+ AND any letters inside them have to be lowercase
# Exmaple:
# [role_panels.935833185072316506-935833199953707079]
#        "U+1f54b" = 930844449838350486
#
# If you want the roles granted by the panel being permanent, you can toggle that on by using the permanent property
# [role_panels.935833185072316506-935833199953707079]
#        permanent = true
role_panels = { }

# Enable or disable modules of the bot for both development and to stop problmatic modules when live should API's break.
modules = {
    # Are the commands from the command module enabled.
    # When false, all commands will be disabled globally if true all commands will be loaded.
    command_module_enabled = true

    # Is the logging module for logging guild changes enabled.
    # When false Discord events will not be logged, this can be used to prevent duplicate spam during development,
    # or should API's break and we need to disable them to prevent errors while we patch things up.
    event_logging_module_enabled = true
}

# Configuration for the bot commands
commands = {
    # The snowflake IDs (or aliases) of 'hidden' channels or categories
    # These will be excluded from the error message when a command is sent from a non-allowed channel
    hidden_channels = []

    # If tricks should be able to run using prefix commands
    prefix_tricks_enabled = false

    # The snowflake IDs (or aliases) of roles exempted from the allowlist and blocklist checking
    # This means that members with these roles may run any (enabled) command in any channel
    exempt_roles = []

    # Configuration of the commands prefixes
    prefix = {
        # The main commands prefix for bot commands
        main = "!mmd-"

        # The alternative commands prefix for bot commands
        # This can be used in lieu of the main commands prefix, for quicker and shorter usage of commands
        alternative = "!"
    }

    # Bot commands may be individually configured; following is an example
    build = { # This configures the `build` command
        # Whether the command is globally enabled and can be used
        # If not configured, the default value is `true`
        enabled = true

        # Commands may also be configured per-guild; following is an example
        guild_alias_here = {# Guild snowflake IDs also work instead of an alias
            # Whether the command is enabled for this guild and can be used
            # Overrides the global setting, if not present then defaults to the global setting
            enabled = false

            # List of snowflake IDs/aliases of channels or categories where this command is blocked
            # If empty or not configured, then the command is not blocked in this guild
            # Blocked channels/categories take priority over being allowed
            blocked_channels = ["channel_in_general_category"]
            # List of snowflake IDs/aliases of channels or categories where this command is allowed
            # If empty or not configured, then the command is always allowed (subject to blocking)
            allowed_channels = ["general_category", "bot_channel"]
        }
    }
}
